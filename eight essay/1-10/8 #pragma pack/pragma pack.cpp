#include <iostream>
#pragma pack(4)

/*
    1. pragma pack(n)
        设定结构体，联合以及类成员变量以n字节方式对齐
    2. 不同的cpu以及系统对于字节对齐是严格的，否则会报错
    3. 大部分cpu的一次性取4字节数据，
       使用字节对齐能够提高cpu的访问效率
    4. 尽管编译器会对字节对齐进行优化，
       但是发生强制、隐式类型转换可能会改变对齐方式
    5. cpu访问内存数据：
        CPU一次只会从4倍数开始的地址一次性读取32位数（数据总线宽度）放到缓存里。
        然后根据需要剔除不要的部分，拼合、移位后传输到内部寄存器里，
        保证内部寄存器里的数据总是正确内容。
        也就是说1字节的数据读取时肯定能读到。2字节的数据可能跨4倍数的界限，
        这时候就需要两个访存周期读取48位数，然后拼合并剔除不要的部分。
        这个过程很浪费时间
    6. 字节对齐的方式不当会造成内存浪费
    7. 使用#pragma pack()或#pragma pack(pop)取消对齐
*/

using namespace std;

int main(int args, char* argv[]) 
{
    cout << endl;
    
    return 0;
}