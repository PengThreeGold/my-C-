#include <iostream>

using namespace std;

/*
    1. 纯虚函数是一种特殊的虚函数，在基类中不能对虚函数给出有意义的实现，
        而把它声明为纯虚函数，它的实现留给该基类的派生类去做。
    2. 一旦基类存在纯虚函数，那么他就变成了抽象类，
        继承抽象类的派生类一定要重写基类的纯虚函数，否则在编译期间就报错
    3. 类里如果声明了虚函数，这个函数是实现的，哪怕是空实现，
        它的作用就是为了能让这个函数在它的子类里面可以被覆盖（override），
        这样的话，编译器就可以使用后期绑定来达到多态了。
        纯虚函数只是一个接口，是个函数的声明而已，它要留到子类里去实现。
    4. 虚函数在子类里面可以不重写；但纯虚函数必须在子类实现才可以实例化子类。
        虚函数的类用于 “实作继承”，继承接口的同时也继承了父类的实现。纯虚函数关注的是接口的统一性，实现由子类完成。
    带纯虚函数的类叫抽象类，这种类不能直接生成对象，而只有被继承，并重写其虚函数后，才能使用。抽象类被继承后，子类可以继续是抽象类，也可以是普通类。
    虚基类是虚继承中的基类，具体见下文虚继承。
*/

class Father
{
public:
    // 声明一个纯虚函数
    virtual void func() = 0;
};

class Child : public Father
{
    public:
    // 使用overide是显示声明对基类的虚函数的重写
    // 虽然不加也行，但是加上更加规范，可读性与可移植性更高
    virtual void func() override
    {
        cout << "重写父类的纯虚函数" << endl;
    }
};

int main(int args, char *argv[])
{
    cout << " --------------" << endl;
    // 只有子类实现了父类的纯虚函数，子类才能用于实例化对象
    Child c;
    return 0;
}